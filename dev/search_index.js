var documenterSearchIndex = {"docs":
[{"location":"pm_api.html#Propagation-modeling-API","page":"Propagation modeling API","title":"Propagation modeling API","text":"","category":"section"},{"location":"pm_api.html#Model-database","page":"Propagation modeling API","title":"Model database","text":"","category":"section"},{"location":"pm_api.html","page":"Propagation modeling API","title":"Propagation modeling API","text":"Modules = [UnderwaterAcoustics]\nPages   = [\"pm_all.jl\"]","category":"page"},{"location":"pm_api.html#UnderwaterAcoustics.addmodel!-Tuple{Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.addmodel!","text":"addmodel!(mtype)\n\n\nRegister model in the list of available models.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.models","page":"Propagation modeling API","title":"UnderwaterAcoustics.models","text":"models()\nmodels(env::UnderwaterEnvironment)\n\nList available models, optionally for a given environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#Core-interfaces","page":"Propagation modeling API","title":"Core interfaces","text":"","category":"section"},{"location":"pm_api.html","page":"Propagation modeling API","title":"Propagation modeling API","text":"Modules = [UnderwaterAcoustics]\nPages   = [\"pm_core.jl\"]","category":"page"},{"location":"pm_api.html#UnderwaterAcoustics.altimetry","page":"Propagation modeling API","title":"UnderwaterAcoustics.altimetry","text":"altimetry(env::UnderwaterEnvironment)::Altimetry\n\nGet the altimetry for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.altitude","page":"Propagation modeling API","title":"UnderwaterAcoustics.altitude","text":"altitude(alt::Altimetry, x, y)\n\nGet water surface altitude at location (x, y). The nominal water surface is considered to have an altitude of zero. However, the water surface may not be flat, and the Altimetry provisions for variations of altitude around the nominal altitutde of zero.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.arrivals","page":"Propagation modeling API","title":"UnderwaterAcoustics.arrivals","text":"arrivals(pm::PropagationModel, tx1::AcousticSource, rx1::AcousticReceiver)\n\nCompute the arrivals from tx1 to rx1. Returns an array of Arrival structs.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.bathymetry","page":"Propagation modeling API","title":"UnderwaterAcoustics.bathymetry","text":"bathymetry(env::UnderwaterEnvironment)::Bathymetry\n\nGet the bathymetry for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.channelmatrix","page":"Propagation modeling API","title":"UnderwaterAcoustics.channelmatrix","text":"channelmatrix(rec::Recorder, fs, ntaps=0; tx=1, rx=1, approx=false)\nchannelmatrix(rec::Vector{<:Arrival}, fs, ntaps=0; approx=false)\n\nGenerate a sampled channel matrix at a sampling rate of fs Hz. If ntaps is zero, the number of taps of the channel matrix are chosen automatically.\n\nIf approx is true, a fast algorithm is used to generate a sparse channel matrix that assigns an arrival to the nearest sampling time.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.check","page":"Propagation modeling API","title":"UnderwaterAcoustics.check","text":"check(pm::Type{<:PropagationModel}, env::UnderwaterEnvironment)\ncheck(pm::Type{<:PropagationModel}, env=missing)\n\nCheck if an propagation model is available, and can simulate the specified environment. Returns the environment if it can be simulated, or throws an error with a descriptive error message if it cannot be simulated.\n\nThis function is internally used by the propagation modeling toolbox to choose a model or offer a selection of models to the user.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.depth","page":"Propagation modeling API","title":"UnderwaterAcoustics.depth","text":"depth(bathy::Bathymetry, x, y)\n\nGet water depth at location (x, y).\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.eigenrays","page":"Propagation modeling API","title":"UnderwaterAcoustics.eigenrays","text":"eigenrays(pm::PropagationModel, tx1::AcousticSource, rx1::AcousticReceiver)\n\nCompute the eigenrays from tx1 to rx1. Returns an array of RayArrival structs.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.environment","page":"Propagation modeling API","title":"UnderwaterAcoustics.environment","text":"environment(pm::PropagationModel)\n\nGet the environment associated with the propagation model.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.impulseresponse-Tuple{PropagationModel, Vector{var\"#s22\"} where var\"#s22\"<:UnderwaterAcoustics.Arrival, Any, Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.impulseresponse","text":"impulseresponse(model::PropagationModel, arrivals::Vector{<:Arrival}, fs, Δt, T; abstime=false, ntaps=0)\n\nConvert a vector of arrivals to a series of sampled time-varying impulse responses, each of which is sampled at a rate of fs Hz, with an impulse response generated every Δt seconds for T seconds. Returns a matrix of impulse responses, where each column corresponds to an impulse response at a specific time.\n\nIf abstime is false, the impulse response start time is relative to the first arrival, otherwise it is relative to the absolute time. If ntaps is zero, the number of taps of the impulse response are chosen automatically.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.impulseresponse-Tuple{Vector{var\"#s4\"} where var\"#s4\"<:UnderwaterAcoustics.Arrival, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.impulseresponse","text":"impulseresponse(model::PropagationModel, arrivals::Vector{<:Arrival}, fs; abstime=false, approx=false, ntaps=0)\nimpulseresponse(arrivals::Vector{<:Arrival}, fs; abstime=false, approx=false, ntaps=0)\n\nConvert a vector of arrivals to a sampled impulse response time series at a sampling rate of fs Hz.\n\nIf abstime is false, the impulse response start time is relative to the first arrival, otherwise it is relative to the absolute time. If approx is true, a fast algorithm is used to generate a sparse impulse response that assigns an arrival to the nearest sampling time. If ntaps is zero, the number of taps of the impulse response are chosen automatically.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.location","page":"Propagation modeling API","title":"UnderwaterAcoustics.location","text":"location(src::AcousticSource)\nlocation(src::AcousticReceiver)\n\nGet the location of an acoustic source or receiver as a 3-tuple (x, y, z).\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.maxdepth","page":"Propagation modeling API","title":"UnderwaterAcoustics.maxdepth","text":"maxdepth(bathy::Bathymetry)\n\nGet the maximum water depth.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.noise","page":"Propagation modeling API","title":"UnderwaterAcoustics.noise","text":"noise(env::UnderwaterEnvironment)::NoiseModel\n\nGet the noise model for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.nominalfrequency","page":"Propagation modeling API","title":"UnderwaterAcoustics.nominalfrequency","text":"nominalfrequency(src::AcousticSource)\n\nGet the nominal frequency of an acoustic source in Hz.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.phasor","page":"Propagation modeling API","title":"UnderwaterAcoustics.phasor","text":"nominalfrequency(src::AcousticSource)\n\nGet the complex phasor representation (amplitude & phase) of a narrowband acoustic source at the nominal frequency.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.rays","page":"Propagation modeling API","title":"UnderwaterAcoustics.rays","text":"rays(pm::PropagationModel, tx1::AcousticSource, θ::Real, rmax)\n\nCompute the rays from tx1 launched at angle θ (or all angles in θ, if it is a vector). Returns an array of RayArrival datatypes. rmax is the maximum horizontal range in meters to track the rays over.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.record","page":"Propagation modeling API","title":"UnderwaterAcoustics.record","text":"record(src::AcousticSource, duration, fs; start=0.0)\nrecord(noise::NoiseModel, duration, fs; start=0.0)\nrecord(model::PropagationModel, tx, rx, duration, fs; start=0.0)\nrecord(model::PropagationModel, tx, rx, sig; abstime=false)\n\nMake a recording of an acoustic source or ambient noise. The start time and duration are specified in seconds, and the recording is made at a sampling rate of fs Hz.\n\nFor an recording of an acoustic source, free space propagation is assumed, and the recording is made at a nominal range of 1 meter from the acoustic center of the source.\n\nFor a recording through a propagation model, tx and rx may be single AcousticSource and AcousticReceiver, or an array each. The returned signal is always complex, irrespective of whether the source is real or complex.\n\nWhen a sig is specified, the sources are assumed to transmit the sampled signal in sig. The number of channels in sig must match the number of sources. The returned signal is the same type as the input signal (real or complex). If abstime is false, the recorded signal starts at the first arrival, otherwise it starts at the beginning of the transmission.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.recorder","page":"Propagation modeling API","title":"UnderwaterAcoustics.recorder","text":"recorder(model::PropagationModel, tx, rx)\n\nCreate a recorder function that may be called later to make an acoustic recording of sources in tx at receviers rx. tx and rx may be single AcousticSource and AcousticReceiver, or an array each.\n\nThe recorder function may be called later with duration, fs, and optionally a start time. Alternatively, the recorder function may also be called with a sampled signal. It functions in a similar way as the record() function.\n\nExamples:\n\njulia> rec = recorder(pm, tx, rx);\njulia> s = rec(1.0, 44100.0; start=0.0);  # make a recording of 1 second at 44.1 kHz\njulia> s = rec(signal(randn(44100), 44100));  # transmit a random 1 second signal\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.reflectioncoef","page":"Propagation modeling API","title":"UnderwaterAcoustics.reflectioncoef","text":"reflectioncoef(rm::ReflectionModel, f, θ)\n\nGet complex reflection coefficient at frequency f Hz and incidence angle θ (w.r.t. the surface normal).\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.salinity","page":"Propagation modeling API","title":"UnderwaterAcoustics.salinity","text":"salinity(env::UnderwaterEnvironment)\n\nGet the salinity of the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.seabed","page":"Propagation modeling API","title":"UnderwaterAcoustics.seabed","text":"seabed(env::UnderwaterEnvironment)::ReflectionModel\n\nGet the seabed reflection model for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.seasurface","page":"Propagation modeling API","title":"UnderwaterAcoustics.seasurface","text":"seasurface(env::UnderwaterEnvironment)::ReflectionModel\n\nGet the sea surface reflection model for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.soundspeed","page":"Propagation modeling API","title":"UnderwaterAcoustics.soundspeed","text":"soundspeed(ssp::SoundSpeedProfile, x, y, z)\n\nGet sound speed at location (x, y, z). If a sound speed profile is range independent, x and y may be ignored. z is generally negative, since the sea surface is the datum and z-axis points upwards.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.ssp","page":"Propagation modeling API","title":"UnderwaterAcoustics.ssp","text":"ssp(env::UnderwaterEnvironment)::SoundSpeedProfile\n\nGet the sound speed profile for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.transfercoef","page":"Propagation modeling API","title":"UnderwaterAcoustics.transfercoef","text":"transfercoef(pm::PropagationModel, tx1::AcousticSource, rx1::AcousticReceiver; mode=:coherent)\ntransfercoef(pm::PropagationModel, tx1::AcousticSource, rx::AbstractArray{<:AcousticReceiver}; mode=:coherent)\n\nCompute the complex transfer coefficients from tx1 to rx1 or all receivers in rx. The mode may be :coherent or :incoherent.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.transmissionloss","page":"Propagation modeling API","title":"UnderwaterAcoustics.transmissionloss","text":"transmissionloss(pm::PropagationModel, tx1::AcousticSource, rx1::AcousticReceiver; mode=:coherent)\ntransmissionloss(pm::PropagationModel, tx1::AcousticSource, rx::AbstractArray{<:AcousticReceiver}; mode=:coherent)\n\nCompute the transmission loss in dB from tx1 to rx1 or all receivers in rx. The mode may be :coherent or :incoherent.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.variability","page":"Propagation modeling API","title":"UnderwaterAcoustics.variability","text":"variability(env::UnderwaterEnvironment)::VariabilityModel\n\nGet the variability model for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#UnderwaterAcoustics.waterdensity","page":"Propagation modeling API","title":"UnderwaterAcoustics.waterdensity","text":"waterdensity(env::UnderwaterEnvironment)\n\nGet the nominal water density for the underwater environment.\n\n\n\n\n\n","category":"function"},{"location":"pm_api.html#Common-models","page":"Propagation modeling API","title":"Common models","text":"","category":"section"},{"location":"pm_api.html","page":"Propagation modeling API","title":"Propagation modeling API","text":"Modules = [UnderwaterAcoustics]\nPages   = [\"pm_basic.jl\"]","category":"page"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticReceiver-Tuple{Any, Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticReceiver","text":"AcousticReceiver(x, y, z)\n\n\nCreate an omnidirectional acoustic receiver at location (x, y, z).\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticReceiver-Tuple{Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticReceiver","text":"AcousticReceiver(x, z)\n\n\nCreate an omnidirectional acoustic receiver at location (x, z).\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticReceiverGrid2D","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticReceiverGrid2D","text":"struct AcousticReceiverGrid2D{T} <: AbstractArray{UnderwaterAcoustics.BasicAcousticReceiver{T}, 2}\n\nA 2D Cartesian grid of omnidirectional acoustic receivers.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticReceiverGrid2D-NTuple{6, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticReceiverGrid2D","text":"AcousticReceiverGrid2D(xmin, xstep, nx, zmin, zstep, nz)\n\n\nCreate a 2D Cartesian grid of omnidirectional acoustic receivers with nx × nz receviers starting (xmin, zmin) with step sizes xstep and zstep.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticReceiverGrid3D","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticReceiverGrid3D","text":"struct AcousticReceiverGrid3D{T} <: AbstractArray{UnderwaterAcoustics.BasicAcousticReceiver{T}, 3}\n\nA 3D Cartesian grid of omnidirectional acoustic receivers.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticReceiverGrid3D-NTuple{9, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticReceiverGrid3D","text":"AcousticReceiverGrid3D(\n    xmin,\n    xstep,\n    nx,\n    ymin,\n    ystep,\n    ny,\n    zmin,\n    zstep,\n    nz\n)\n\n\nCreate a 3D Cartesian grid of omnidirectional acoustic receivers with nx × ny × nz receviers starting (xmin, ymin, zmin) with step sizes xstep, ystep, and zstep.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticSource-NTuple{4, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticSource","text":"AcousticSource(x, y, z, f; sourcelevel, ϕ)\n\n\nCreate a narrowband acoustic source with frequency f Hz at location (x, y, z). The sourcelevel is in µPa @ 1m. A phase ϕ may be optionlly specified.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.AcousticSource-Tuple{Any, Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.AcousticSource","text":"AcousticSource(x, z, f; sourcelevel, ϕ)\n\n\nCreate a narrowband acoustic source with frequency f Hz at location (x, y, z). The sourcelevel is in µPa @ 1m. A phase ϕ may be optionlly specified.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.BasicAcousticReceiver","page":"Propagation modeling API","title":"UnderwaterAcoustics.BasicAcousticReceiver","text":"struct BasicAcousticReceiver{T} <: AcousticReceiver\n\nOmnidirectional acoustic receiver.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.BasicAcousticReceiver-Tuple{Any, Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.BasicAcousticReceiver","text":"BasicAcousticReceiver(x, y, z)\n\n\nCreate an omnidirectional acoustic receiver at location (x, y, z).\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.BasicAcousticReceiver-Tuple{Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.BasicAcousticReceiver","text":"BasicAcousticReceiver(x, z)\n\n\nCreate an omnidirectional acoustic receiver at location (x, z).\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.ConstantDepth","page":"Propagation modeling API","title":"UnderwaterAcoustics.ConstantDepth","text":"struct ConstantDepth{T} <: Bathymetry\n\nBathymetry with constant depth.\n\n\n\nConstantDepth(depth)\n\nCreate a constant depth bathymetry.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.FlatSurface","page":"Propagation modeling API","title":"UnderwaterAcoustics.FlatSurface","text":"struct FlatSurface <: Altimetry\n\nAltimetry for a flat surface with constant altitude of zero.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.IsoSSP","page":"Propagation modeling API","title":"UnderwaterAcoustics.IsoSSP","text":"struct IsoSSP{T} <: SoundSpeedProfile\n\nIsovelocity sound speed profile.\n\n\n\nIsoSSP(c)\n\nCreate an isovelocity sound speed profile with sound speed c.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.MunkSSP","page":"Propagation modeling API","title":"UnderwaterAcoustics.MunkSSP","text":"struct MunkSSP <: SoundSpeedProfile\n\nMunk sound speed profile.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.NarrowbandAcousticSource","page":"Propagation modeling API","title":"UnderwaterAcoustics.NarrowbandAcousticSource","text":"struct NarrowbandAcousticSource{T1, T2, T3, T4} <: AcousticSource\n\nNarrowband acoustic source.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.NarrowbandAcousticSource-NTuple{4, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.NarrowbandAcousticSource","text":"NarrowbandAcousticSource(x, y, z, f; sourcelevel, ϕ)\n\n\nCreate a narrowband acoustic source with frequency f Hz at location (x, y, z). The sourcelevel is in µPa @ 1m. A phase ϕ may be optionlly specified.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.NarrowbandAcousticSource-Tuple{Any, Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.NarrowbandAcousticSource","text":"NarrowbandAcousticSource(x, z, f; sourcelevel, ϕ)\n\n\nCreate a narrowband acoustic source with frequency f Hz at location (x, z). Thesourcelevelis in µPa @ 1m. A phaseϕ` may be optionlly specified.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.NoNoise","page":"Propagation modeling API","title":"UnderwaterAcoustics.NoNoise","text":"struct NoNoise <: NoiseModel\n\nAmbient noise model representing no noise.\n\n\n\nNoNoise(σ)\n\nCreate an ambient noise model representing no noise.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.NoVariability","page":"Propagation modeling API","title":"UnderwaterAcoustics.NoVariability","text":"struct NoVariability <: UnderwaterAcoustics.VariabilityModel\n\nNo time variability.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.Pinger","page":"Propagation modeling API","title":"UnderwaterAcoustics.Pinger","text":"struct Pinger{T1, T2, T3, T4, T5, T6, T7, T8} <: AcousticSource\n\nNarrowband pulsed acoustic source.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.Pinger-NTuple{4, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.Pinger","text":"Pinger(x, y, z, f; sourcelevel, phase, duration, start, interval, window)\n\nCreate a pulsed narrowband acoustic source with frequency f Hz at location (x, y, z). Additional parameters that may be specified:\n\nsourcelevel in µPa @ 1m (default 180 dB)\nphase of the narrowband signal (default 0)\nduration of the pulse in seconds (default 20 ms)\nstart time of one of the pulses in seconds (default 0)\npulse repetition interval in seconds (default 1 second)\nwindow type (from DSP.jl) (default nothing)\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.Pinger-Tuple{Any, Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.Pinger","text":"Pinger(x, z, f; sourcelevel, phase, duration, start, interval, window)\n\nCreate a pulsed narrowband acoustic source with frequency f Hz at location (x, z). Additional parameters that may be specified:\n\nsourcelevel in µPa @ 1m (default 180 dB)\nphase of the narrowband signal (default 0)\nduration of the pulse in seconds (default 20 ms)\nstart time of one of the pulses in seconds (default 0)\npulse repetition interval in seconds (default 1 second)\nwindow type (from DSP.jl) (default nothing)\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.RayleighReflectionCoef","page":"Propagation modeling API","title":"UnderwaterAcoustics.RayleighReflectionCoef","text":"struct RayleighReflectionCoef{T1, T2, T3} <: ReflectionModel\n\nReflection model for a surface with a Rayleigh reflection coefficient.\n\n\n\nRayleighReflectionCoef(ρᵣ, cᵣ, δ)\nRayleighReflectionCoef(ρᵣ, cᵣ)\n\nCreate a reflection model for a surface with a Rayleigh reflection coefficient with relative density ρᵣ, relative sound speed cᵣ, and dimensionless attentuation δ. If attentuation δ is unspecified, it is assumed to be zero.\n\nSee reflectioncoef() for more details.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.RedGaussianNoise","page":"Propagation modeling API","title":"UnderwaterAcoustics.RedGaussianNoise","text":"struct RedGaussianNoise{T} <: NoiseModel\n\nAmbient noise model with Gaussian noise with a 1/f² power spectral density.\n\n\n\nRedGaussianNoise(σ)\n\nCreate an ambient noise model with variance σ² and 1/f² power spectral density.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.ReflectionCoef","page":"Propagation modeling API","title":"UnderwaterAcoustics.ReflectionCoef","text":"struct ReflectionCoef{T<:Number} <: ReflectionModel\n\nReflection model for a surface with a constant reflection coefficient.\n\n\n\nReflectionCoef(coef)\n\nCreate a reflection model for a surface with a constant reflection coefficient coef.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.SampledAcousticSource","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledAcousticSource","text":"struct SampledAcousticSource{T1, T2, T3<:AbstractArray} <: AcousticSource\n\nAcoustic source transmitting a sampled signal.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.SampledAcousticSource-Tuple{Any, Any, AbstractArray}","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledAcousticSource","text":"SampledAcousticSource(x, z, sig; fs, frequency)\n\nCreate a sampled acoustic source transmitting signal sig at location (x, z). The samples are assumed to be in µPa @ 1m from the source.\n\nAdditional parameters that may be specified:\n\nfs is the sampling rate of signal sig\nnominal frequency in Hz (nothing to auto-estimate)\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.SampledAcousticSource-Tuple{Any, Any, Any, AbstractArray}","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledAcousticSource","text":"SampledAcousticSource(x, y, z, sig; fs, frequency)\n\nCreate a sampled acoustic source transmitting signal sig at location (x, y, z). The samples are assumed to be in µPa @ 1m from the source.\n\nAdditional parameters that may be specified:\n\nfs is the sampling rate of the signal sig\nnominal frequency in Hz (nothing to auto-estimate)\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.SampledAltitude","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledAltitude","text":"struct SampledAltitude{T1, T2, T3} <: Altimetry\n\nAltimetry based on altitude samples.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.SampledAltitude-Tuple{Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledAltitude","text":"SampledAltitude(x, altitude)\nSampledAltitude(x, altitude, interp)\n\nCreate an altimetry given discrete altitude measurements at locations given in x. interp may be either :linear or :smooth, and defaults to :linear if unspecified.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.SampledDepth","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledDepth","text":"struct SampledDepth{T1, T2, T3} <: Bathymetry\n\nBathymetry based on depth samples.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.SampledDepth-Tuple{Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledDepth","text":"SampledDepth(x, depth)\nSampledDepth(x, depth, interp)\n\nCreate a bathymetry given discrete depth measurements at locations given in x. interp may be either :linear or :smooth, and defaults to :linear if unspecified.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.SampledSSP","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledSSP","text":"abstract type SampledSSP <: SoundSpeedProfile\n\nSound speed profile based on discrete measurements.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.SampledSSP-Tuple{Any, Any}","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledSSP","text":"SampledSSP(depth, c)\nSampledSSP(depth, c, interp)\nSampledSSP(range, depth, c)\nSampledSSP(range, depth, c, interp)\n\nCreate a sound speed profile based on measurements at discrete depths. interp may be either :linear or :smooth, and defaults to :linear if unspecified. :smooth is currently only supported for range-independent sound speed profiles.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.SampledSSP1D","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledSSP1D","text":"struct SampledSSP1D{T1, T2, T3} <: SampledSSP\n\nSound speed profile based on measurements at discrete depths.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.SampledSSP2D","page":"Propagation modeling API","title":"UnderwaterAcoustics.SampledSSP2D","text":"struct SampledSSP2D{T1, T2, T3, T4} <: SampledSSP\n\nSound speed profile based on measurements at discrete depths and ranges.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.SurfaceLoss","page":"Propagation modeling API","title":"UnderwaterAcoustics.SurfaceLoss","text":"struct SurfaceLoss{T} <: ReflectionModel\n\nReflection model for a water surface affected by wind.\n\n\n\nSurfaceLoss(windspeed)\n\nCreate a reflection model for a surface affected by wind. windspeed is given in m/s.\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#UnderwaterAcoustics.UnderwaterEnvironment-Tuple{}","page":"Propagation modeling API","title":"UnderwaterAcoustics.UnderwaterEnvironment","text":"UnderwaterEnvironment(; altimetry, bathymetry, ssp, salinity, seasurface, seabed, noise)\n\nCreate an underwater environment.\n\n\n\n\n\n","category":"method"},{"location":"pm_api.html#UnderwaterAcoustics.WhiteGaussianNoise","page":"Propagation modeling API","title":"UnderwaterAcoustics.WhiteGaussianNoise","text":"struct WhiteGaussianNoise{T} <: NoiseModel\n\nAmbient noise model with Gaussian noise with a flat power spectral density.\n\n\n\nWhiteGaussianNoise(σ)\n\nCreate an white Gaussian ambient noise model with variance σ².\n\n\n\n\n\n","category":"type"},{"location":"pm_api.html#Propagation-models","page":"Propagation modeling API","title":"Propagation models","text":"","category":"section"},{"location":"pm_api.html","page":"Propagation modeling API","title":"Propagation modeling API","text":"Modules = [UnderwaterAcoustics]\nPages   = [\"pm_pekeris.jl\"]","category":"page"},{"location":"pm_api.html#UnderwaterAcoustics.PekerisRayModel","page":"Propagation modeling API","title":"UnderwaterAcoustics.PekerisRayModel","text":"struct PekerisRayModel{T} <: PropagationModel{T}\n\nA fast differentiable ray model that only supports isovelocity constant depth environments.\n\n\n\nPekerisRayModel(env, rays)\n\nCreate a Pekeris ray propagation model with a maximum of rays ray arrivals.\n\n\n\n\n\n","category":"type"},{"location":"pm_pekeris.html#PekerisRayModel","page":"PekerisRayModel","title":"PekerisRayModel","text":"","category":"section"},{"location":"pm_pekeris.html","page":"PekerisRayModel","title":"PekerisRayModel","text":"CurrentModule = UnderwaterAcoustics","category":"page"},{"location":"pm_pekeris.html","page":"PekerisRayModel","title":"PekerisRayModel","text":"The Pekeris ray model is a very fast fully differentiable 2D/3D ray model for isovelocity range-independent environments. The only parameter that has to be specified when creating the model is the desired number of rays.","category":"page"},{"location":"pm_pekeris.html","page":"PekerisRayModel","title":"PekerisRayModel","text":"Example:","category":"page"},{"location":"pm_pekeris.html","page":"PekerisRayModel","title":"PekerisRayModel","text":"using UnderwaterAcoustics\nusing Plots\n\nenv = UnderwaterEnvironment(\n  seasurface = SeaState2,\n  seabed = SandyClay\n)\npm = PekerisRayModel(env, 7)    # 7-ray model\ntx = AcousticSource(0.0, -5.0, 1000.0)\nrx = AcousticReceiver(100.0, -10.0)\nr = eigenrays(pm, tx, rx)\nplot(env; sources=[tx], receivers=[rx], rays=r)","category":"page"},{"location":"pm_pekeris.html","page":"PekerisRayModel","title":"PekerisRayModel","text":"(Image: )","category":"page"},{"location":"pm_pekeris.html","page":"PekerisRayModel","title":"PekerisRayModel","text":"For more information on how to use the propagation models, see Propagation modeling toolkit.","category":"page"},{"location":"tut_autodiff.html#Differentiable-modeling","page":"Differentiable modeling","title":"Differentiable modeling","text":"","category":"section"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"note: Note\nThis tutorial is adapted from the example presented in the UComms 2020 webinar talk \"Underwater Acoustics in the age of differentiable and probabilistic programming\".","category":"page"},{"location":"tut_autodiff.html#Problem-statement","page":"Differentiable modeling","title":"Problem statement","text":"","category":"section"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"Let us consider a scenario where a drifting probe acoustically transmits its sensor data periodically to a static receiver. The initial position of the sensor is perfectly known, and so is the environment. But the path of the sensor as it drifts is not known, but we'd like to get an estimate of it from the received acoustic signal. Due to the high data rate requirements, the receiver uses an equalization technique that requires an accurate estimate of the channel impulse response. We want to generate that using a propagation model and an accurate estimate of the location of the probe.","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"The environment is an isovelocity channel with a constant depth of 20 m and known seabed parameters (relative density ρ = 1.5, relative soundspeed c = 1.2, and attenuation δ = 0.001). The probe uses a 1-2 kHz band for data transmission, and includes 101 pilots at 10 Hz spacing to aid with channel estimation. The transmission loss can be accurately measured at those pilot frequencies, since the transmit source level is assumed to be known, but phase information is assumed to be unavailable at each pilot.","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"(Image: )","category":"page"},{"location":"tut_autodiff.html#Dataset","page":"Differentiable modeling","title":"Dataset","text":"","category":"section"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"To illustrate the idea, we generate a 60-transmission dataset with a linearly drifting path for the transmitter. Since we have an range-independent isovelocity environment, we can use the PekerisRayModel (otherwise we could use the RaySolver):","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"using UnderwaterAcoustics\nusing DataFrames\n\nfunction 𝒴(θ)\n  r, d, f, ρ, c, δ = θ\n  env = UnderwaterEnvironment(seabed = RayleighReflectionCoef(ρ, c, δ))\n  tx = AcousticSource(0.0, -5.0, f)\n  rx = AcousticReceiver(r, -d)\n  pm = PekerisRayModel(env, 7)\n  transmissionloss(pm, tx, rx)\nend\n\ndata = [(\n    range=100.0 + 0.5t,\n    depth=6.0 + 0.01t,\n    pilots=[𝒴([100.0 + 0.5t, 6.0 + 0.01t, f, 1.5, 1.2, 0.001]) for f ∈ 1000.0:10.0:2000.0]\n  ) for t ∈ 0.0:1.0:59.0]\ndata = DataFrame(vec(data))","category":"page"},{"location":"tut_autodiff.html#Gradient-descent","page":"Differentiable modeling","title":"Gradient descent","text":"","category":"section"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"In order to recover the drift path of the probe, we build a simple error model for the measured pilots. We initialize the model with the known starting location of the probe, and track the probe by minimizing the error through gradient descent.","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"Since our propagation model is differentiable, the gradient of the error can be automatically computed during the optimization using ForwardDiff.jl.","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"using ForwardDiff\n\n# channel model for pilots\npilots(r, d) = [\n  𝒴([r, d, f, 1.5, 1.2, 0.001]) for f ∈ 1000.0:10.0:2000.0\n]\n\n# gradient descent optimization\nfunction chparams(data)\n  history = []\n  θ = [100.0, 6.0]    # known initial location\n  η = [1e-4, 1e-6]    # learning rate\n  for row ∈ eachrow(data)\n    err(θ) = sum(abs2, pilots(θ[1], θ[2]) .- row.pilots)  # error model\n    for i ∈ 1:100      # iterations of simple gradient descent\n      θ .-=  η .* ForwardDiff.gradient(err, θ)\n    end\n    push!(history, (range=θ[1], depth=θ[2]))\n  end\n  DataFrame(history)\nend\n\np = chparams(data)","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"Now that we have a path estimate, let's check it against the ground truth:","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"using Plots\n\nplot(data.range, -data.depth; xlabel=\"Range (m)\", ylabel=\"Depth (m)\", label=\"Ground truth\")\nscatter!(p.range, -p.depth; label=\"Estimated\")","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"(Image: )","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"We have a pretty good match!","category":"page"},{"location":"tut_autodiff.html#Impulse-response-estimation","page":"Differentiable modeling","title":"Impulse response estimation","text":"","category":"section"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"Now we can generate the impulse response for each of the 60 received data packets:","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"# compute impulse response\nfunction iresp(r, d)\n  env = UnderwaterEnvironment(\n    seabed = RayleighReflectionCoef(1.5, 1.2, 0.001)\n  )\n  tx = AcousticSource(0.0, -5.0, 1500.0)\n  rx = AcousticReceiver(r, -d)\n  pm = PekerisRayModel(env, 7)\n  impulseresponse(arrivals(pm, tx, rx), 8000; reltime=true)[1:72]\nend\n\nir = hcat([iresp(row.range, row.depth) for row ∈ eachrow(p)]...)'\nheatmap(20*log10.(abs.(ir)); clim=(-60, -30), xlabel=\"Delay (samples)\", ylabel=\"Transmission #\", yflip=true)","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"(Image: )","category":"page"},{"location":"tut_autodiff.html","page":"Differentiable modeling","title":"Differentiable modeling","text":"We see the impulse response evolve over time as the probe drifts. This can then be used for channel equalization and to recover the transmitted data!","category":"page"},{"location":"tut_turing.html#Probabilistic-modeling","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"","category":"section"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"note: Note\nThis tutorial is based on the example presented in the UComms 2020 webinar talk \"Underwater Acoustics in the age of differentiable and probabilistic programming\".","category":"page"},{"location":"tut_turing.html#Problem-statement","page":"Probabilistic modeling","title":"Problem statement","text":"","category":"section"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"Let us consider a geoacoustic inversion problem where we have a static omnidirectional broadband acoustic source transmitting in a 5-7 kHz band. A single omnidirectional receiver picks up the signal at a fixed range, but profiles the water column, and therefore makes transmission loss measurements at various depths. We would like to estimate seabed parameters from these transmission loss measurements.","category":"page"},{"location":"tut_turing.html#Dataset","page":"Probabilistic modeling","title":"Dataset","text":"","category":"section"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"To illustrate this idea, let us generate a synthetic dataset for a known set of seabed parameters (relative density ρ = 1.5, relative soundspeed c = 1.2, and attenuation δ = 0.001).","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"The environment is assumed to be an isovelocity and with a constant depth of 20 m. The source is at a depth of 5 m. The receiver is at a range of 100 m from the source, and makes measurements at depths from 10 to 19 m in steps of 1 m.","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"(Image: )","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"Since we have an range-independent isovelocity environment, we can use the PekerisRayModel (otherwise we could use the RaySolver):","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"using UnderwaterAcoustics\nusing DataFrames\n\nfunction 𝒴(θ)\n  r, d, f, ρ, c, δ = θ\n  env = UnderwaterEnvironment(seabed = RayleighReflectionCoef(ρ, c, δ))\n  tx = AcousticSource(0.0, -5.0, f)\n  rx = AcousticReceiver(r, -d)\n  pm = PekerisRayModel(env, 7)\n  transmissionloss(pm, tx, rx)\nend\n\ndata = [\n  (depth=d, frequency=f, xloss=𝒴([100.0, d, f, 1.5, 1.2, 0.001]))\n  for d ∈ 10.0:1.0:19.0, f ∈ 5000.0:100.0:7000.0\n]\ndata = DataFrame(vec(data))","category":"page"},{"location":"tut_turing.html#Probabilistic-model","page":"Probabilistic modeling","title":"Probabilistic model","text":"","category":"section"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"We use some very loose uniform priors for ρ, c and δ, and estimate the transmission loss using the same model 𝒴, as used in the data generation, but without information on the actual seabed parameters. We assume that the measurements of transmission loss are normally distributed around the modeled transmission loss, with a covariance of 0.5 dB.","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"We define the probabilistic model as a Turing.jl model:","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"using Turing\n\n# depths d, frequencies f, transmission loss measurements x\n@model function geoacoustic(d, f, x)\n  ρ ~ Uniform(1.0, 3.0)\n  c ~ Uniform(0.5, 2.5)\n  δ ~ Uniform(0.0, 0.003)\n  μ = [𝒴([100.0, d[i], f[i], ρ, c, δ]) for i ∈ 1:length(d)]\n  x ~ MvNormal(μ, 0.5)\nend","category":"page"},{"location":"tut_turing.html#Variational-inference","page":"Probabilistic modeling","title":"Variational inference","text":"","category":"section"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"Once we have the model defined, we can run Bayesian inference on it. We could either use MCMC methods from Turing, or variational inference. Since our model is differentiable, we choose to use the automatic differentiation variational inference (ADVI):","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"using Turing: Variational\n\nq = vi(\n  geoacoustic(data.depth, data.frequency, data.xloss),\n  ADVI(100, 10000)\n)","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"The returned q is a 3-dimensional posterior probability distribution over the parameters ρ, c and δ. We can estimate the mean of the distribution by drawing random variates and taking the sample mean:","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"julia> mean(rand(q, 10000); dims=2)\n3×1 Array{Float64,2}:\n 1.4989510476936188\n 1.2000012848664092\n 0.0009835578241605488","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"We see that the estimated parameter means for ρ, c and δ are quite close to the actual values used in generating the data.","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"We can also plot the conditional distributions of each parameter:","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"using StatsPlots\n\nplot(ρ -> pdf(q, [ρ, 1.2, 0.001]), 1.3, 1.7; xlabel=\"ρ\")\nplot(c -> pdf(q, [1.5, c, 0.001]), 1.1, 1.3; xlabel=\"c\")\nplot(δ -> pdf(q, [1.5, 1.2, δ]), 0.0, 0.003; xlabel=\"δ\")","category":"page"},{"location":"tut_turing.html","page":"Probabilistic modeling","title":"Probabilistic modeling","text":"(Image: ) (Image: ) (Image: )","category":"page"},{"location":"uw_basic.html#Underwater-acoustics","page":"Underwater acoustics","title":"Underwater acoustics","text":"","category":"section"},{"location":"uw_basic.html","page":"Underwater acoustics","title":"Underwater acoustics","text":"Utility functions:","category":"page"},{"location":"uw_basic.html","page":"Underwater acoustics","title":"Underwater acoustics","text":"Modules = [UnderwaterAcoustics]\nPages   = [\"uw_basic.jl\"]","category":"page"},{"location":"uw_basic.html#UnderwaterAcoustics.absorption","page":"Underwater acoustics","title":"UnderwaterAcoustics.absorption","text":"absorption(frequency)\nabsorption(frequency, distance)\nabsorption(frequency, distance, salinity)\nabsorption(frequency, distance, salinity, temperature)\nabsorption(\n    frequency,\n    distance,\n    salinity,\n    temperature,\n    depth\n)\nabsorption(\n    frequency,\n    distance,\n    salinity,\n    temperature,\n    depth,\n    pH\n)\n\n\nCompute volume acoustic absorption coefficient in water, given:\n\nfrequency in Hz\ndistance in meters\nsalinity in ppm\nwater temperature in °C\ndepth in meters\npH of water\n\nThe result is a unitless linear scale factor for sound pressure over the given distance. To get  absorption in terms of dB / m, set distance = 1.0 and convert the result to decibels. For instance,  at a frequency of 100 kHz:\n\njulia> A = absorption(100e3, 1.0)\n0.9959084838594522\n\njulia> α = -20log10(A)\n0.035611359656810865\n\nImplementation based on the Francois and Garrison (1982) model.\n\n\n\n\n\n","category":"function"},{"location":"uw_basic.html#UnderwaterAcoustics.bubbleresonance","page":"Underwater acoustics","title":"UnderwaterAcoustics.bubbleresonance","text":"bubbleresonance(radius)\nbubbleresonance(radius, depth)\nbubbleresonance(radius, depth, γ)\nbubbleresonance(radius, depth, γ, p0)\nbubbleresonance(radius, depth, γ, p0, ρ)\n\n\nCompute resonance frequency of a freely oscillating has bubble in water, given:\n\nbubble radius in meters\ndepth of bubble in water in meters\ngas ratio of specific heats 'γ', default: 1.4 (for air)\natmospheric pressure 'p0', default: 1.013e5\ndensity of water 'ρ' in kg/m³, default: 1022.476\n\nThis ignores surface-tension, thermal, viscous and acoustic damping effects, and the pressure-volume relationship is taken to be adiabatic. Implementation based on Medwin & Clay (1998).\n\n\n\n\n\n","category":"function"},{"location":"uw_basic.html#UnderwaterAcoustics.dBperλ-Tuple{Any}","page":"Underwater acoustics","title":"UnderwaterAcoustics.dBperλ","text":"dBperλ(x)\n\n\nCompute dimensionless absorption coefficient δ from dB/λ. Implementation based on APL-UW TR 9407 (1994), IV-9 equation (4).\n\n\n\n\n\n","category":"method"},{"location":"uw_basic.html#UnderwaterAcoustics.doppler","page":"Underwater acoustics","title":"UnderwaterAcoustics.doppler","text":"doppler(speed, frequency)\ndoppler(speed, frequency, c)\n\n\nCompute Doppler frequency, given relative speed between transmitter and receiver in m/s. c is the nominal sound speed in water.\n\n\n\n\n\n","category":"function"},{"location":"uw_basic.html#UnderwaterAcoustics.indBperλ-Tuple{Any}","page":"Underwater acoustics","title":"UnderwaterAcoustics.indBperλ","text":"indBperλ(δ)\n\n\nCompute dB/λ from dimensionless absorption coefficient δ. Implementation based on APL-UW TR 9407 (1994), IV-9 equation (4).\n\n\n\n\n\n","category":"method"},{"location":"uw_basic.html#UnderwaterAcoustics.reflectioncoef","page":"Underwater acoustics","title":"UnderwaterAcoustics.reflectioncoef","text":"reflectioncoef(θ, ρᵣ, cᵣ)\nreflectioncoef(θ, ρᵣ, cᵣ, δ)\n\n\nCompute complex reflection coefficient at a fluid-fluid boundary, given:\n\nangle of incidence θ (angle to the surface normal)\nrelative density of the reflecting medium to incidence medium ρᵣ\nrelative sound speed of the reflecting medium to incidence medium cᵣ\ndimensionless absorption coefficient δ\n\nImplementation based on Brekhovskikh & Lysanov. Dimensionless absorption coefficient based on APL-UW Technical Report 9407.\n\n\n\n\n\n","category":"function"},{"location":"uw_basic.html#UnderwaterAcoustics.soundspeed","page":"Underwater acoustics","title":"UnderwaterAcoustics.soundspeed","text":"soundspeed()\nsoundspeed(temperature)\nsoundspeed(temperature, salinity)\nsoundspeed(\n    temperature,\n    salinity,\n    depth;\n    voidfrac,\n    cgas,\n    reldensity\n)\n\n\nCompute sound speed in water in m/s, given:\n\nwater temperature in °C\nsalinity in ppt\ndepth in meters\nvoid fraction (voidfrac) in bubbly water\nsound speed in gas (cgas), if voidfrac > 0\nratio of density of water to gas (reldensity), if voidfrac > 0\n\nImplementation based on Mackenzie (1981), Wood (1964) and Buckingham (1997).\n\n\n\n\n\n","category":"function"},{"location":"uw_basic.html#UnderwaterAcoustics.surfaceloss-Tuple{Any, Any, Any}","page":"Underwater acoustics","title":"UnderwaterAcoustics.surfaceloss","text":"surfaceloss(windspeed, frequency, θ)\n\n\nCompute surface reflection coefficient, given:\n\nwindspeed in m/s\nfrequency in Hz\nangle of incidence θ (angle to the surface normal)\n\nImplementation based on the APL-UW Technical Report 9407 II-21.\n\n\n\n\n\n","category":"method"},{"location":"uw_basic.html#UnderwaterAcoustics.waterdensity","page":"Underwater acoustics","title":"UnderwaterAcoustics.waterdensity","text":"waterdensity()\nwaterdensity(temperature)\nwaterdensity(temperature, salinity)\n\n\nCompute density of water (kg/m^3), given temperature in °C and salinity in ppm.\n\nImplementation based on Fofonoff (1985 - IES 80).\n\n\n\n\n\n","category":"function"},{"location":"pm_basic.html#Propagation-modeling-toolkit","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"","category":"section"},{"location":"pm_basic.html#Overview","page":"Propagation modeling toolkit","title":"Overview","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"The underwater acoustic propagation modeling & simulation toolkit provides a framework for modeling and simulating underwater acoustic environments with multiple sources and receivers. The toolkit provides a pluggable interface that allows different propagation models to be used with the same scene description. While UnderwaterAcoustics.jl provides several propagation model implementations that can be used out-of-the-box, the interface is designed to allow third party propagation models to be easily plugged in to the toolkit as well.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Available models:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Model Description Language Strengths Limitations\nPekerisRayModel Analytical ray model for Pekeris waveguides Julia Fast, differentiable, multi-threaded Isovelocity, range independent\nRaySolver Ray/Gaussian beam model Julia Differentiable, multi-threaded Tell us and we'll fix them!\nBellhop Interface to OALIB Bellhop model FORTRAN Well established benchmark model Does not support automatic differentiation\nKraken Interface to OALIB Kraken model FORTRAN Well established benchmark model Does not support automatic differentiation\nRayBasis Ray-basis neural network models Julia Data-driven models Requires training data\nGPR Gaussian process regression models Julia Data-driven model Requires training data","category":"page"},{"location":"pm_basic.html#Quickstart-guide","page":"Propagation modeling toolkit","title":"Quickstart guide","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Let's get started:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> using UnderwaterAcoustics","category":"page"},{"location":"pm_basic.html#Define-an-environment","page":"Propagation modeling toolkit","title":"Define an environment","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"First, let's setup an environment description.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> env = UnderwaterEnvironment()\nBasicUnderwaterEnvironment:\n  altimetry = FlatSurface()\n  bathymetry = ConstantDepth{Float64}(20.0)\n  ssp = IsoSSP{Float64}(1539.0866009307247)\n  salinity = 35.0\n  seasurface = SurfaceLoss{Float64}(2.6)\n  seabed = RayleighReflectionCoef{Float64,Float64,Float64}(1.169, 0.9999, 0.01261)\n  noise = RedGaussianNoise{Float64}(1.0e6)","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Environments are immutable, so you have to customize them during construction. For example:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> env = UnderwaterEnvironment(\n         seasurface = Vacuum,\n         seabed = SandyClay,\n         ssp = SampledSSP(0.0:20.0:40.0, [1500.0, 1490.0, 1520.0], :smooth),\n         bathymetry = ConstantDepth(40.0)\n       )\nBasicUnderwaterEnvironment:\n  altimetry = FlatSurface()\n  bathymetry = ConstantDepth{Float64}(40.0)\n  ssp = SampledSSP{Float64,Float64,linear}(3 points)\n  salinity = 35.0\n  seasurface = ReflectionCoef{Float64}(-1.0)\n  seabed = RayleighReflectionCoef{Float64,Float64,Float64}(1.147, 0.9849, 0.00242)\n  noise = RedGaussianNoise{Float64}(1.0e6)","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"If you have Plots.jl installed, you can use plot recipes to plot the environment or the soundspeed profile. For example:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> using Plots\njulia> plot(ssp(env))","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"(Image: )","category":"page"},{"location":"pm_basic.html#Selecting-a-model","page":"Propagation modeling toolkit","title":"Selecting a model","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Once you have an environment, you need to select a propagation model. To get a list of all available models:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> models()\n3-element Array{Any,1}:\n PekerisRayModel\n RaySolver\n Bellhop","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"NOTE: Bellhop will only be available if you have a working copy of OALIB bellhop.exe available on your PATH.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Once you have an environment, you can select a model that can work with that environment:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> models(env)\n2-element Array{Any,1}:\n RaySolver\n Bellhop","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"In this case, we got a shorter list back because the PekerisRayModel can't deal with non-isovelocity SSP. We can confirm this by creating an iso-velocity environment:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> env = UnderwaterEnvironment()\nBasicUnderwaterEnvironment:\n  altimetry = FlatSurface()\n  bathymetry = ConstantDepth{Float64}(20.0)\n  ssp = IsoSSP{Float64}(1539.0866009307247)\n  salinity = 35.0\n  seasurface = SurfaceLoss{Float64}(2.6)\n  seabed = RayleighReflectionCoef{Float64,Float64,Float64}(1.169, 0.9999, 0.01261)\n  noise = RedGaussianNoise{Float64}(1.0e6)\n\njulia> models(env)\n2-element Array{Any,1}:\n PekerisRayModel\n RaySolver","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"This time you see that Bellhop wasn't included, as it assumes a Vacuum surface by default and we have a SeaState1 surface as our default.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Let's pick a 7-ray Pakeris ray model for now:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> pm = PekerisRayModel(env, 7)\nPekerisRayModel with BasicUnderwaterEnvironment:\n  altimetry = FlatSurface()\n  bathymetry = ConstantDepth{Float64}(20.0)\n  ssp = IsoSSP{Float64}(1539.0866009307247)\n  salinity = 35.0\n  seasurface = SurfaceLoss{Float64}(2.6)\n  seabed = RayleighReflectionCoef{Float64,Float64,Float64}(1.169, 0.9999, 0.01261)\n  noise = RedGaussianNoise{Float64}(1.0e6)","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"If you wanted the ray solver instead, you'd do pm = RaySolver(env), or for a Bellhop model, you'd do pm = Bellhop(env). Both models can take additional keyword parameters that can customize the solver.","category":"page"},{"location":"pm_basic.html#Defining-sources-and-receivers","page":"Propagation modeling toolkit","title":"Defining sources and receivers","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Now, we need a source and a receiver:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> tx = AcousticSource(0.0, -5.0, 1000.0);\njulia> rx = AcousticReceiver(100.0, -10.0);","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"This defines an omnidirectional 1 kHz transmitter tx at a depth of 5 m at the origin, and an omnidirectional receiver at a range of 100 m and a depth of 10 m.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"NOTE: All coordinates are specified in meters as (x, y, z) for 3D or (x, z) for 2D. The coordinate system has x and y axis in the horizontal plane, and z axis pointing upwards, with the nominal water surface being at 0 m. This means that all z coordinates in water are negative.","category":"page"},{"location":"pm_basic.html#Ray-tracing","page":"Propagation modeling toolkit","title":"Ray tracing","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Now that we have an environment, a propation model, a transmitter and a receiver, we can modeling. First, we ask for all eigenrays between the transmitter and receiver:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> r = eigenrays(pm, tx, rx)\n7-element Array{UnderwaterAcoustics.RayArrival{Float64,Float64},1}:\n ∠ -2.9°  0↑  0↓ ∠  2.9° |  65.05 ms | -40.0 dB ϕ  -0.0° ⤷\n ∠  8.5°  1↑  0↓ ∠  8.5° |  65.70 ms | -40.1 dB ϕ-180.0° ⤷\n ∠-14.0°  0↑  1↓ ∠-14.0° |  66.97 ms | -59.0 dB ϕ  60.5° ⤷\n ∠ 19.3°  1↑  1↓ ∠-19.3° |  68.84 ms | -61.3 dB ϕ-141.7° ⤷\n ∠-24.2°  1↑  1↓ ∠ 24.2° |  71.25 ms | -62.3 dB ϕ-153.8° ⤷\n ∠ 28.8°  2↑  1↓ ∠ 28.8° |  74.15 ms | -63.0 dB ϕ  19.4° ⤷\n ∠-33.0°  1↑  2↓ ∠-33.0° |  77.49 ms | -85.4 dB ϕ-149.4° ⤷","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"For each eigenray, this shows us the launch angle, number of surface bounces, number of bottom bounces, arrival angle, travel time, transmission loss along that ray, and phase change. The last \"⤷\" symbol indicates that the complete ray path is also available. We can plot the ray paths:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> plot(env; sources=[tx], receivers=[rx], rays=r)","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"(Image: )","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Th red star is the transmitter and the blue circle is the receiver. The stronger eigenrays are shown in blue, while the weaker ones are shown in red.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"We might sometimes want to see all rays from the transmitter at certain angular spacing (-45°:5°:45°) and a given range (100 m):","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> r = rays(pm, tx, -45°:5°:45°, 100.0)\n19-element Array{UnderwaterAcoustics.RayArrival{Float64,Float64},1}:\n ∠-45.0°  2↑  3↓ ∠-45.0° |  91.89 ms | -109.6 dB ϕ  27.5° ⤷\n ∠-40.0°  2↑  2↓ ∠ 40.0° |  84.82 ms | -86.8 dB ϕ  22.1° ⤷\n ∠-35.0°  1↑  2↓ ∠-35.0° |  79.32 ms | -85.9 dB ϕ-152.3° ⤷\n ∠-30.0°  1↑  2↓ ∠-30.0° |  75.03 ms | -85.2 dB ϕ-143.9° ⤷\n ∠-25.0°  1↑  1↓ ∠ 25.0° |  71.69 ms | -62.8 dB ϕ-155.2° ⤷\n ∠-20.0°  1↑  1↓ ∠ 20.0° |  69.14 ms | -61.9 dB ϕ-143.9° ⤷\n ∠-15.0°  0↑  1↓ ∠-15.0° |  67.27 ms | -59.6 dB ϕ  55.5° ⤷\n ⋮\n ∠ 15.0°  1↑  1↓ ∠-15.0° |  67.27 ms | -60.0 dB ϕ-124.5° ⤷\n ∠ 20.0°  1↑  1↓ ∠-20.0° |  69.14 ms | -61.9 dB ϕ-143.9° ⤷\n ∠ 25.0°  2↑  1↓ ∠ 25.0° |  71.69 ms | -63.1 dB ϕ  24.8° ⤷\n ∠ 30.0°  2↑  1↓ ∠ 30.0° |  75.03 ms | -63.6 dB ϕ  18.1° ⤷\n ∠ 35.0°  2↑  2↓ ∠-35.0° |  79.32 ms | -86.2 dB ϕ  27.7° ⤷\n ∠ 40.0°  2↑  2↓ ∠-40.0° |  84.82 ms | -86.8 dB ϕ  22.1° ⤷\n ∠ 45.0°  3↑  2↓ ∠ 45.0° |  91.89 ms | -87.7 dB ϕ-161.7° ⤷\n\njulia> plot(env; sources=[tx], rays=r)","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"(Image: )","category":"page"},{"location":"pm_basic.html#Arrivals-and-transmission-loss","page":"Propagation modeling toolkit","title":"Arrivals & transmission loss","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Often, we are interested in the arrival structure or transmission loss at a receiver. Getting the arrivals is quite similar to getting eigenrays, but the ray paths are not stored:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> a = arrivals(pm, tx, rx)\n7-element Array{UnderwaterAcoustics.RayArrival{Float64,Missing},1}:\n ∠ -2.9°  0↑  0↓ ∠  2.9° |  65.05 ms | -40.0 dB ϕ  -0.0°\n ∠  8.5°  1↑  0↓ ∠  8.5° |  65.70 ms | -40.1 dB ϕ-180.0°\n ∠-14.0°  0↑  1↓ ∠-14.0° |  66.97 ms | -59.0 dB ϕ  60.5°\n ∠ 19.3°  1↑  1↓ ∠-19.3° |  68.84 ms | -61.3 dB ϕ-141.7°\n ∠-24.2°  1↑  1↓ ∠ 24.2° |  71.25 ms | -62.3 dB ϕ-153.8°\n ∠ 28.8°  2↑  1↓ ∠ 28.8° |  74.15 ms | -63.0 dB ϕ  19.4°\n ∠-33.0°  1↑  2↓ ∠-33.0° |  77.49 ms | -85.4 dB ϕ-149.4°","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"If we prefer, we can plot these arrivals as an impulse response (sampled at 44.1 kSa/s, in this case):","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> plot(abs.(impulseresponse(a, 44100; reltime=true)); xlabel=\"Sample #\", legend=false)","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"(Image: )","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"The reltime=true option generates an impulse response with time relative to the first arrival (default is relative to transmission time).","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"If we want, we can also get the complex transfer coefficient or the transmission loss in dB:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> transfercoef(pm, tx, rx)\n0.013183979186458052 - 0.012267750240848727im\n\njulia> transmissionloss(pm, tx, rx)\n34.89032959932541","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"You can also pass in arrays of sources and receivers, if you want many transmission losses to be computed simultanously. Some models are able to compute transmission loss on a Cartesion grid very efficiently. This is useful to plot transmission loss as a function of space.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"To define a 1000×200 Cartesion grid with 0.1 m spacing:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> rx = AcousticReceiverGrid2D(1.0, 0.1, 1000, -20.0, 0.1, 200)\n1000×200 AcousticReceiverGrid2D{Float64}:\n BasicAcousticReceiver((1.0, 0.0, -20.0))    …  BasicAcousticReceiver((1.0, 0.0, -0.1))\n BasicAcousticReceiver((1.1, 0.0, -20.0))       BasicAcousticReceiver((1.1, 0.0, -0.1))\n BasicAcousticReceiver((1.2, 0.0, -20.0))       BasicAcousticReceiver((1.2, 0.0, -0.1))\n ⋮                                           ⋱\n BasicAcousticReceiver((100.7, 0.0, -20.0))     BasicAcousticReceiver((100.7, 0.0, -0.1))\n BasicAcousticReceiver((100.8, 0.0, -20.0))     BasicAcousticReceiver((100.8, 0.0, -0.1))\n BasicAcousticReceiver((100.9, 0.0, -20.0))     BasicAcousticReceiver((100.9, 0.0, -0.1))","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"We can then compute the transmission loss over the grid:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> x = transmissionloss(pm, tx, rx)\n1000×200 Array{Float64,2}:\n 19.0129  19.12    19.5288  …   9.02602   8.23644   8.86055  11.1436  16.4536\n 19.017   19.1239  19.5324      9.02506   8.26487   8.90641  11.2     16.5155\n 19.0217  19.1284  19.5366  …   9.02392   8.29514   8.95536  11.2602  16.5817\n 19.0271  19.1336  19.5415      9.0226    8.32706   9.00713  11.3239  16.6519\n  ⋮                 ⋮       ⋱              ⋮                           ⋮\n 35.5238  35.4909  35.4954     56.1556   57.7909   59.9858   63.1631  68.5643\n 35.5742  35.5448  35.5526  …  56.5185   58.1488   60.3365   63.5039  68.8852\n 35.6261  35.6     35.611      56.8971   58.522    60.7023   63.8594  69.2206\n 35.6793  35.6565  35.6704     57.2926   58.9118   61.0841   64.2306  69.5712\n\njulia> plot(env; receivers=rx, transmissionloss=x)","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"(Image: )","category":"page"},{"location":"pm_basic.html#Acoustic-simulations","page":"Propagation modeling toolkit","title":"Acoustic simulations","text":"","category":"section"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"Apart from propagation modeling, we can also setup a simulation with various sources and receviers.","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"We demonstrate this by setting up a scenario with two pingers (1 kHz, 10 ms pulse with 1 Hz PRR; 2 kHz, 20 ms pulse with 2 Hz PRR) with a source level of 170 dB re µPa @ 1m, at two locations, and deploying two omnidirectional receviers to record them:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> using DSP: db2amp\njulia> tx = [\n  Pinger(0.0, 0.0, -5.0, 1000.0; interval=1.0, duration=10e-3, sourcelevel=db2amp(170)),\n  Pinger(0.0, 100.0, -5.0, 2000.0; interval=0.5, duration=20e-3, sourcelevel=db2amp(170))\n]\n\njulia> rx = [\n  AcousticReceiver(100.0, 0.0, -10.0);\n  AcousticReceiver(50.0, 20.0, -5.0)\n];","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"To carry out the simulation, we can for a 2-second long recording (at 8 kSa/s) at the receivers:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> s = record(pm, tx, rx, 2.0, 8000.0)\nSampledSignal @ 8000.0 Hz, 16000×2 Array{Complex{Float64},2}:\n  127308.0+884666.0im   1.15927e6-548579.0im\n -263820.0+1.16962e6im   1.1377e6+541803.0im\n  -80980.6+1.16562e6im   657226.0+738712.0im\n          ⋮\n -447370.0+910253.0im    163952.0-436691.0im\n -431239.0+903852.0im    100509.0-118066.0im\n -391797.0+582705.0im     49383.0-679981.0im","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"The signals are returned as complex analytic signals, but can be easily converted to real signals, if desired:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> s = real(s)\nSampledSignal @ 8000.0 Hz, 16000×2 Array{Float64,2}:\n -672702.0   318731.0\n -825049.0   377382.0\n -984626.0   214490.0\n       ⋮\n   66193.3  -497239.0\n -144031.0  -321312.0\n -260200.0  -235680.0","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"To visualize the recording, we plot a spectrogram of the signal at the first receiver with the SignalAnalysis.jl package:","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"julia> using SignalAnalysis\njulia> specgram(s[:,1])","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"(Image: )","category":"page"},{"location":"pm_basic.html","page":"Propagation modeling toolkit","title":"Propagation modeling toolkit","text":"We can clearly see the two pingers, as well as the ambient noise generated with the noise model defined in the environment description.","category":"page"},{"location":"index.html#UnderwaterAcoustics.jl","page":"Home","title":"UnderwaterAcoustics.jl","text":"","category":"section"},{"location":"index.html#Julia-toolbox-for-underwater-acoustic-modeling","page":"Home","title":"Julia toolbox for underwater acoustic modeling","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = UnderwaterAcoustics","category":"page"},{"location":"index.html#Highlights","page":"Home","title":"Highlights","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Underwater acoustic propagation modeling with pluggable models\nDifferentiable and probabilistic underwater acoustic modeling\nUnderwater acoustics utility functions","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"julia>]\npkg> add UnderwaterAcoustics","category":"page"},{"location":"index.html#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Propagation modeling toolkit quickstart guide.\nUnderwater acoustics utility functions.","category":"page"},{"location":"index.html#Talks-and-publications","page":"Home","title":"Talks & publications","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Mandar Chitre, \"Underwater Acoustics in the age of differentiable and probabilistic programming\", UComms 2020 webinar, 3 December 2020.","category":"page"},{"location":"pm_envref.html#Environmental-model-reference","page":"Environmental model reference","title":"Environmental model reference","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"CurrentModule = UnderwaterAcoustics","category":"page"},{"location":"pm_envref.html#Environmental-model","page":"Environmental model reference","title":"Environmental model","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"abstract type UnderwaterEnvironment\naltimetry()\nbathymetry()\nssp()\nsalinity()\nseasurface()\nseabed()\nnoise()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"UnderwaterEnvironment","category":"page"},{"location":"pm_envref.html#Sound-speed-profiles","page":"Environmental model reference","title":"Sound speed profiles","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"abstract type SoundSpeedProfile\nsoundspeed()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"IsoSSP\nMunkSSP\nSampledSSP","category":"page"},{"location":"pm_envref.html#Bathymetry","page":"Environmental model reference","title":"Bathymetry","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"abstract type Bathymetry\ndepth()\nmaxdepth()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"ConstantDepth\nSampledDepth","category":"page"},{"location":"pm_envref.html#Altimetry","page":"Environmental model reference","title":"Altimetry","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"abstract type Altimetry\naltitude()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"FlatSurface\nSampledAltitude","category":"page"},{"location":"pm_envref.html#Sea-surface","page":"Environmental model reference","title":"Sea surface","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"abstract type ReflectionModel\nreflectioncoef()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"ReflectionCoef\nRayleighReflectionCoef\nSurfaceLoss\nconst Vacuum\nconst SeaState0\nconst SeaState1\nconst SeaState2\nconst SeaState3\nconst SeaState4\nconst SeaState5\nconst SeaState6\nconst SeaState7\nconst SeaState8\nconst SeaState9","category":"page"},{"location":"pm_envref.html#Seabed","page":"Environmental model reference","title":"Seabed","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"abstract type ReflectionModel\nreflectioncoef()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"ReflectionCoef\nRayleighReflectionCoef\nconst Rock\nconst Pebbles\nconst SandyGravel\nconst CoarseSand\nconst MediumSand\nconst FineSand\nconst VeryFineSand\nconst ClayeySand\nconst CoarseSilt\nconst SandySilt\nconst Silt\nconst FineSilt\nconst SandyClay\nconst SiltyClay\nconst Clay","category":"page"},{"location":"pm_envref.html#Acoustic-sources","page":"Environmental model reference","title":"Acoustic sources","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"AcousticSource\nlocation()\nnominalfrequency()\nphasor()\nrecord()\nrecorder()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"NarrowbandAcousticSource\nPinger\nSampledAcousticSource","category":"page"},{"location":"pm_envref.html#Acoustic-receivers","page":"Environmental model reference","title":"Acoustic receivers","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"AcousticReceiver\nlocation()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"AcousticReceiver\nAcousticReceiverGrid2D\nAcousticReceiverGrid3D","category":"page"},{"location":"pm_envref.html#Ambient-noise","page":"Environmental model reference","title":"Ambient noise","text":"","category":"section"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Interface:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"abstact type NoiseModel\nrecord()","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"Standard models:","category":"page"},{"location":"pm_envref.html","page":"Environmental model reference","title":"Environmental model reference","text":"RedGaussianNoise\nany other distribution that works with rand()","category":"page"}]
}
