---
title: "Positions and units"
engine: julia
---

{{< include jdoc.snippet >}}

```{julia}
#| echo: false
#| output: false
using UnderwaterAcoustics
using Plots
default(size=(600, 400))
```

## Positions

We often need 1D, 2D or 3D positions to describe the location of a source, receiver, or other object in the underwater environment. The canonical representation for positions is a named 3-tuple of coordinates of the form `(x=0.0, y=0.0, z=0.0)`. We define the generic data type `XYZ` to represent such a named tuple:

```julia
const XYZ = NamedTuple{(:x,:y,:z)}
```
<br>

It is sometimes more convenient to represent positions in simpler forms, with just a single or two-coordinates. In most places where positions are expected, we automatically convert various input representations to a `XYZ`. This allows the user to specify scalars, tuples, or named tuples as input. For example, the `AcousticReceiver(⋯)` accepts receiver position as input:
```{julia}
using UnderwaterAcoustics

# The following are all equivalent:
@info AcousticReceiver((x=0, y=0, z=-10)).pos
@info AcousticReceiver((x=0, z=-10)).pos
@info AcousticReceiver((z=-10,)).pos
@info AcousticReceiver((0, 0, -10)).pos
@info AcousticReceiver((0, -10)).pos
@info AcousticReceiver(-10).pos
@info AcousticReceiver(0, 0, -10).pos
@info AcousticReceiver(0, -10).pos
```
The last two forms are only available in functions that accept no other positional arguments (other than position), and therefore do not cause any confusion as to the meaning of positional arguments.

## Units

We also support units though [`Unitful.jl`](https://github.com/PainterQubits/Unitful.jl). Internally, all quantities are represented as floating point numbers without explicit units, with standard units (mostly SI units) assumed implicitly. Input quantities are automatically converted to the implicit units as necessary. For example, positions can be specified with units:
```{julia}
# The following are all equivalent:
@info AcousticReceiver(1000, -10).pos
@info AcousticReceiver(1000u"m", -10u"m").pos
@info AcousticReceiver(1u"km", -10u"m").pos
@info AcousticReceiver((1u"km", -10u"m")).pos
@info AcousticReceiver((x=1u"km", z=-1000u"cm")).pos
```

We may also use units in other places:
```{julia}
@show soundspeed(0u"°C");
@show soundspeed(32u"°F");
@show reflection_coef(10°, 1.2, 1.5);   # const ° is defined as u"°"
@show absorption(10u"kHz");
```
including environment descriptions:
```{julia}
env = UnderwaterEnvironment(
  soundspeed = 1.5u"km/s",
  temperature = 60u"°F",
  salinity = 35u"ppt",
  density = 1.025u"g/cm^3",
  bathymetry = 100u"m"
)
```

## Extending

While standard `UnderwaterAcoustics.jl` API functions automatically convert input values to the appropriate `XYZ` and units, you may wish to support these features in your own code when extending `UnderwaterAcoustics.jl`. To do so, you may use the unexported function `xyz(⋯)` to create a position from various different forms. You may also use the unexported `in_units(⋯)` function to convert input values to the appropriate units:
```julia
using UnderwaterAcoustics: XYZ, in_units

function myfunction(pos, temperature)
  pos = xyz(pos)
  temperature = in_units(u"°C", temperature)
  # ⋯
end
```

#### API reference

```{julia}
#| echo: false
#| output: asis
jdoc(UnderwaterAcoustics, :xyz)
jdoc(UnderwaterAcoustics, :in_units)
```
