---
title: "PekerisModeSolver"
engine: julia
---

{{< include jdoc.snippet >}}

| <span> | <span> |
|---|---|
| **Model** | `UnderwaterAcoustics.PekerisModeSolver` |
| **Description** | Normal mode model for constant depth iso-velocity environments |
| **Language** | Julia |
| **Advantages** | Fast, differentiable (forward mode), multi-threaded |
| **Limitations** | Iso-velocity, pressure-release surface, fluid half-space seabed, no seabed absorption (no leaky modes) |
| **Differentiability** | `ForwardDiff` |

: {tbl-colwidths="[25,75]"}

```{julia}
#| echo: false
#| output: asis
import UnderwaterAcoustics
jdoc(UnderwaterAcoustics, :PekerisModeSolver)
```

Implementation largely based on mathematical description in:

- M. B. Porter, "The KRAKEN normal mode program", Technical report NRL/MR/5120-92-6920, Naval Research Laboratory, 1992 [(pdf)](https://apps.dtic.mil/sti/tr/pdf/ADA252409.pdf).

::: {.callout-tip}
The theory of modal models is summarized in a brief note "[On modal models](modes.qmd)". It provides an overview of the key concepts and mathematical formulations, as implemented in this model.
:::

While the `PekerisModeSolver` is range-independent by itself, it can be made range-dependent by using `AdiabaticExt` as shown in the example below.

## Examples

```{julia}
#| echo: false
#| output: false
using Plots
default(size=(600, 400))
```

### Range-independent scenario

```{julia}
using UnderwaterAcoustics
using Plots

env = UnderwaterEnvironment(
  bathymetry = 5000,
  soundspeed = 1500,
  density = 1000,
  seabed = FluidBoundary(2000, 2000)
)
pm = PekerisModeSolver(env)

tx = AcousticSource(0, -500, 10)
rx = AcousticReceiver(200000, -2500)
modes = arrivals(pm, tx, rx)[1:7]      # first 7 modes
```
```{julia}
# plot the modes
plot(modes)
```
```{julia}
rxs = AcousticReceiverGrid2D(200000:10:220000, -2500)
x = transmission_loss(pm, tx, rxs)

plot(200:0.01:220, x; ylims=(70,110), yflip=true, legend=false,
  xlabel="Range (km)", ylabel="Transmission loss (dB)")
```

### Range-dependent scenario

```{julia}
using UnderwaterAcoustics
using Plots

env = UnderwaterEnvironment(
  bathymetry = SampledField([200, 150, 200]; x=[0, 2000, 5000], interp=:linear),
  soundspeed = 1500,
  density = 1000,
  seabed = FluidBoundary(2000, 2000)
)

# use an adiabatic extension to the PekerisModeSolver for range-dependence
pm = AdiabaticExt(PekerisModeSolver, env)

tx = AcousticSource(0, -50, 250)
rx = AcousticReceiver(7000, -25)
modes = arrivals(pm, tx, rx)[1:7]      # first 7 modes
```
```{julia}
# plot the modes
plot(modes)
```
```{julia}
rxs = AcousticReceiverGrid2D(10:10:7000, -200:1)
x = transmission_loss(pm, tx, rxs)

plot(rxs, x; crange=50)
plot!(env)
```

We can also estimate a bandlimited impulse response from the propagation model:
```{julia}
plot(impulse_response(pm, tx, rx, 8000; fmin=200, fmax=300))
```

## Notes

- Differentiability currently works only with `ForwardDiff`, and excludes `impulse_response()`.
