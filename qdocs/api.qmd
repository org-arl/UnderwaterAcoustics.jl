---
title: "Propagation & channel modeling"
engine: julia
---

**API reference**

{{< include jdoc.snippet >}}

```{julia}
#| echo: false
#| output: false
import UnderwaterAcoustics
```

## Environment models

```{julia}
#| echo: false
#| output: asis
jdoc(UnderwaterAcoustics, :UnderwaterEnvironment)
jdoc(UnderwaterAcoustics, :is_range_dependent, 2)
jdoc(UnderwaterAcoustics, :is_isovelocity)
jdoc(UnderwaterAcoustics, :env_type)
```

## Propagation models

```{julia}
#| echo: false
#| output: asis
jdoc(UnderwaterAcoustics, :models)
jdoc(UnderwaterAcoustics, :PekerisRayTracer)
jdoc(UnderwaterAcoustics, :PekerisModeSolver)
jdoc(UnderwaterAcoustics, :AdiabaticExt)
jdoc(UnderwaterAcoustics, :RayArrival)
jdoc(UnderwaterAcoustics, :ModeArrival)
jdoc(UnderwaterAcoustics, :arrivals)
jdoc(UnderwaterAcoustics, :acoustic_field)
jdoc(UnderwaterAcoustics, :transmission_loss)
jdoc(UnderwaterAcoustics, :impulse_response)
```

## Channel models and simulation

```{julia}
#| echo: false
#| output: asis
jdoc(UnderwaterAcoustics, :channel)
jdoc(UnderwaterAcoustics, :BasebandReplayChannel)
jdoc(UnderwaterAcoustics, :transmit)
```

## Boundary conditions

```{julia}
#| echo: false
#| output: asis
jdoc(UnderwaterAcoustics, :reflection_coef, 2)
jdoc(UnderwaterAcoustics, :PressureReleaseBoundary)
jdoc(UnderwaterAcoustics, :RigidBoundary)
jdoc(UnderwaterAcoustics, :FluidBoundary)
jdoc(UnderwaterAcoustics, :ElasticBoundary)
jdoc(UnderwaterAcoustics, :MultilayerElasticBoundary)
jdoc(UnderwaterAcoustics, :WindySurface)
```

::: {.callout-tip appearance="minimal"}
Pre-defined boundary conditions based on APL-UW Technical Report 9407:
```julia
# sea surface boundary conditions
const SeaState0    = WindySurface(0.8)
const SeaState1    = WindySurface(2.6)
const SeaState2    = WindySurface(4.4)
const SeaState3    = WindySurface(6.9)
const SeaState4    = WindySurface(9.8)
const SeaState5    = WindySurface(12.6)
const SeaState6    = WindySurface(19.3)
const SeaState7    = WindySurface(26.5)
const SeaState8    = WindySurface(30.6)
const SeaState9    = WindySurface(32.9)
```
```julia
# seabed fluid boundary conditions
const Rock              = FluidBoundary(2557.50, 3820.00, 0.01374)
const Pebbles           = FluidBoundary(2557.50, 2750.40, 0.01374)
const SandyGravel       = FluidBoundary(2549.32, 2073.50, 0.01705)
const VeryCoarseSand    = FluidBoundary(2455.20, 1996.64, 0.01667)
const MuddySandyGravel  = FluidBoundary(2367.22, 1952.48, 0.0163)
const CoarseSand        = FluidBoundary(2282.31, 1910.46, 0.01638)
const GravellyMuddySand = FluidBoundary(2200.47, 1870.42, 0.01645)
const MediumSand        = FluidBoundary(1887.44, 1800.29, 0.01624)
const MuddyGravel       = FluidBoundary(1652.15, 1741.31, 0.0161)
const FineSand          = FluidBoundary(1484.37, 1691.95, 0.01602)
const MuddySand         = FluidBoundary(1369.80, 1650.24, 0.01728)
const VeryFineSand      = FluidBoundary(1297.16, 1614.79, 0.01875)
const ClayeySand        = FluidBoundary(1252.15, 1583.62, 0.02019)
const CoarseSilt        = FluidBoundary(1222.49, 1555.35, 0.02158)
const SandySilt         = FluidBoundary(1195.89, 1527.85, 0.01261)
const MediumSilt        = FluidBoundary(1175.43, 1510.43, 0.00676)
const SandyMud          = FluidBoundary(1175.43, 1508.59, 0.00386)
const FineSilt          = FluidBoundary(1174.40, 1506.76, 0.00306)
const SandyClay         = FluidBoundary(1173.38, 1504.93, 0.00242)
const VeryFineSilt      = FluidBoundary(1173.38, 1503.09, 0.00194)
const SiltyClay         = FluidBoundary(1172.36, 1501.11, 0.00163)
const Clay              = FluidBoundary(1171.34, 1497.44, 0.00148)
```
```julia
# seabed elastic boundary conditions
const ElasticRock              = ElasticBoundary(Rock, 0.07u"dB/m/kHz")
const ElasticPebbles           = ElasticBoundary(Pebbles, 0.07u"dB/m/kHz")
const ElasticSandyGravel       = ElasticBoundary(SandyGravel, 13.2u"dB/m/kHz")
const ElasticVeryCoarseSand    = ElasticBoundary(VeryCoarseSand, 13.2u"dB/m/kHz")
const ElasticMuddySandyGravel  = ElasticBoundary(MuddySandyGravel, 4.8u"dB/m/kHz")
const ElasticCoarseSand        = ElasticBoundary(CoarseSand, 13.2u"dB/m/kHz")
const ElasticGravellyMuddySand = ElasticBoundary(GravellyMuddySand, 4.8u"dB/m/kHz")
const ElasticMediumSand        = ElasticBoundary(MediumSand, 13.2u"dB/m/kHz")
const ElasticMuddyGravel       = ElasticBoundary(MuddyGravel, 4.8u"dB/m/kHz")
const ElasticFineSand          = ElasticBoundary(FineSand, 13.2u"dB/m/kHz")
const ElasticMuddySand         = ElasticBoundary(MuddySand, 4.8u"dB/m/kHz")
const ElasticVeryFineSand      = ElasticBoundary(VeryFineSand, 13.2u"dB/m/kHz")
const ElasticClayeySand        = ElasticBoundary(ClayeySand, 4.8u"dB/m/kHz")
const ElasticCoarseSilt        = ElasticBoundary(CoarseSilt, 13.4u"dB/m/kHz")
const ElasticSandySilt         = ElasticBoundary(SandySilt, 13.4u"dB/m/kHz")
```
:::

## Sources and receivers

```{julia}
#| echo: false
#| output: asis
jdoc(UnderwaterAcoustics, :AcousticSource)
jdoc(UnderwaterAcoustics, :AcousticReceiver)
jdoc(UnderwaterAcoustics, :AcousticReceiverGrid2D)
jdoc(UnderwaterAcoustics, :AcousticReceiverGrid3D)
jdoc(UnderwaterAcoustics, :location)
jdoc(UnderwaterAcoustics, :frequency)
jdoc(UnderwaterAcoustics, :spl)
```

## Noise models

```{julia}
#| echo: false
#| output: asis
jdoc(UnderwaterAcoustics, :WhiteGaussianNoise)
jdoc(UnderwaterAcoustics, :RedGaussianNoise)
jdoc(UnderwaterAcoustics, :rand; filt=contains("AbstractNoiseModel"))
```
